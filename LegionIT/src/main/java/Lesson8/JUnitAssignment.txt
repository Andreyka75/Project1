package Lesson8;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class daysOfTheWeekMain {
    private static final Logger Logger = LogManager.getLogger(daysOfTheWeekMain.class);
    public static void main(String[] args) {
        daysOfTheWeek days = new daysOfTheWeek();
        String day = days.getDay(1);
        //System.out.println(day);
        Logger.info("The day is: "+day);

package Lesson8;

import java.util.ArrayList;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class daysOfTheWeek {
    private static final Logger Logger = LogManager.getLogger(daysOfTheWeek.class);

    public static String getDay(Integer dayNumber) {
        ArrayList<String> daysList = new ArrayList<>();
        daysList.add("Sunday");
        daysList.add("Monday");
        daysList.add("Tuesday");
        daysList.add("Wednesday");
        daysList.add("Thursday");
        daysList.add("Friday");
        daysList.add("Saturday");

        Logger.info("Trying to find the correct day");

        if (dayNumber == null) {
            Logger.info("The NULL value excepted");
            throw new NullPointerException();

        }
        else if (dayNumber < 1) {
            return "The number should be equal or larger than 1";
        } else if (dayNumber > 7) {
            return "The number should be equal or smaller than 7";
        } else {
            return daysList.get(dayNumber - 1);
        }
    }

}


import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.*;
import Lesson8.*;


import java.util.stream.Stream;
import static org.junit.jupiter.api.Assertions.*;


public class daysOfTheWeekPositiveTests {

    @BeforeAll
    public static void classSetup() {
        System.out.println("Positive tests");
    }

    @ParameterizedTest
    @MethodSource("numberToDay")
    public void dayOfWeek(int number, String expectedResult) {

        String actualResult = daysOfTheWeek.getDay(number);
        assertEquals(expectedResult, actualResult);

    }

    static Stream<Arguments> numberToDay() {
        return Stream.of(
                Arguments.of(1, "Sunday"),
                Arguments.of(2, "Monday"),
                Arguments.of(3, "Tuesday"),
                Arguments.of(4, "Wednesday"),
                Arguments.of(5, "Thursday"),
                Arguments.of(6, "Friday"),
                Arguments.of(7, "Saturday")

        );
    }
    @ParameterizedTest
    @CsvSource ({"1,Sunday","7,Saturday"})
    public void csvSourceTest(int a, String expectedResult){
        String actualResult = daysOfTheWeek.getDay(a);
        assertEquals(expectedResult,actualResult);
    }
}

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import Lesson8.*;


import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class daysOfTheWeekNegativeTests {
    private static final Logger Logger = LogManager.getLogger(daysOfTheWeekNegativeTests.class);
    @BeforeAll
    public static void classSetup() {
        Logger.info("Negative tests");
    }
    @BeforeEach
    public void start() {
        Logger.info("Test start");
    }
    @AfterEach
    public void finish() {
        Logger.info("Test finished");
    }
    @ParameterizedTest
    @ValueSource(ints = {0,-10, -2, -27, -3435})
    public void negativeNumsTest(int a){
        String expectedResult = "The number should be equal or larger than 1";

        String actualResult = daysOfTheWeek.getDay(a);
        assertEquals(expectedResult,actualResult,"The number should be bigger than 0");
        Logger.info("expected result is: "+expectedResult);
        Logger.info("actual result is: "+actualResult);

    }
    @ParameterizedTest
    @MethodSource("dataProvider")
    public void WrongPositiveNumbers(int a,String expectedResult, String actualResult){

        assertEquals(expectedResult,actualResult,"The number should be between 0 to 8");
    }
    static Stream<Arguments> dataProvider(){
        return Stream.of(
                Arguments.of(8,"The number should be equal or smaller than 7",daysOfTheWeek.getDay(8)),
                Arguments.of(12,"The number should be equal or smaller than 7",daysOfTheWeek.getDay(12)),
                Arguments.of(34,"The number should be equal or smaller than 7",daysOfTheWeek.getDay(34)),
                Arguments.of(9,"The number should be equal or smaller than 7",daysOfTheWeek.getDay(9))

        );
    }

}

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import Lesson8.*;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class daysOfTheWeekNullValueTest {
    @Test
    @DisplayName("Null pointer Exception test")
    public void errorTest(){

        assertThrows(NullPointerException.class, ()-> {
            daysOfTheWeek.getDay(null);});

    }
}

